library(caper)
arcData <- read.csv("arcfeatures2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arc, lambda='ML')
summary(model.pgls)
output <- summary(model.pgls)$coefficient
crossval <- function(data, estimate){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test -  try: X_test %*% t(as.numeric(as.character(w)))**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
source('~/gitcode/code/pgls/crossval_R.r')
crossval(arcData, output[,1])
source('~/gitcode/code/pgls/crossval_R.r')
crossval(arcData, output[,1])
use warnings(())
use warnings(()
warnings()
library(caper)
arcData <- read.csv("arcfeatures2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arc, lambda='ML')
summary(model.pgls)
output <- summary(model.pgls)$coefficient
crossval(arcData, output[,1])
library(caper)
bacData <- read.csv("bacfeatures2.csv")
bacTree <- read.tree("neobacreduced3aligned.faa.contree.rooted")
bac <- comparative.data(phy = bacTree, data = bacData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_F + prot_G + prot_I + prot_L + prot_M + prot_P + prot_R + prot_S + prot_T + prot_V + prot_W + prot_Y + Genome_Dinuc_AC + Genome_Dinuc_AG + Genome_Dinuc_AT + Genome_Dinuc_CG, data = bac, lambda='ML')
summary(model.pgls)
#output <- summary(model.pgls)$coefficient
#crossval(arcData, output[,1])
source('~/gitcode/code/pgls/crossval_R.r')
library(caper)
arcData <- read.csv("arcfeatures2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arc, lambda='ML')
summary(model.pgls)
output <- summary(model.pgls)$coefficient
crossval(arcData, output[,1])
source('~/gitcode/code/pgls/crossval_R.r')
library(caper)
arcData <- read.csv("arcfeatures2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arc, lambda='ML')
summary(model.pgls)
output <- summary(model.pgls)$coefficient
crossval(arcData, output[,1])
