library(caper)
arcData <- read.csv("arcpsychro.csv")
arcTree <- read.tree("archaeaortho.tre")
arcTree <- read.tree("archeaortho.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT~ prot_D + prot_E, data = arc, lambda='ML')
arcTree <- read.tree("archeaortho.nex")
arcTree <- read.nexus("archeaortho.nex")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
library(caper)
arcData <- read.csv("arcpsychro.csv")
arcTree <- read.nexus("archeaortho.nex")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT~ prot_D + prot_E, data = arc, lambda='ML')
arcTree <- read.nexus("archeaortho.nex")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
arcTree <- read.tree("archeaorthonobs.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
arcTree <- read.tree("archeaorthocleaned.tre")
library(caper)
arcData <- read.csv("arcpsychro.csv")
arcTree <- read.tree("archeaorthocleaned.tre")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
arcTree <- read.tree("arcorthocleaned1.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
arcData <- read.csv("arcpsychro2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT~ prot_D + prot_E, data = arc, lambda='ML')
summary(model.pgls)
View(model.pgls)
plot(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arcData)
library(caper)
arcData <- read.csv("arcfeatures2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arc, lambda='ML')
summary(model.pgls)
plot(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arcData)
abline(model.pgls)
abline(model.pgls)
library(caper)
arcData <- read.csv("arcfeatures2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arc, lambda='ML')
summary(model.pgls)
plot(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arcData)
abline(model.pgls, col="red",lwd=2)
model.pgls$Coefficients do
model.pgls(Coefficients) do
model.pgls$Coefficients
library(caper)
arcData <- read.csv("arcfeatures2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arc, lambda='ML')
summary(model.pgls)
crossval <- function(data){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = solve(t(X_train)%*%X_train + diag(M))%*%t(X_train)%*%t_train
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
model.pgls$Coefficients
summary(model.pgls$Coefficients)
summary(model.pgls$coefficients)
summary(model.pgls)
summary(model.pgls)$Coefficients
summary(model.pgls)$coefficients
summary(model.pgls)$coefficients$estimate
summary(model.pgls)$coefficients$Estimate
summary(model.pgls)$Estimate
summary(model.pgls)$estimate
summary(model.pgls)$coefficients$estimate
model.pgls$coefficients[, 1]
model.pgls$coefficients['Estimate']
model.pgls$coefficients['estimate']
model.pgls$coefficients['Estimate']
model.pgls$coefficients[]
model.pgls$coefficients
library(caper)
arcData <- read.csv("arcfeatures2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arc, lambda='ML')
summary(model.pgls)
crossval <- function(data){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = solve(t(X_train)%*%X_train + diag(M))%*%t(X_train)%*%t_train
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
model.pgls$coefficients['Estimate']
model.pgls$coefficients[]
model.pgls$coefficients
summary(model.pgls)$Coefficients
summary(model.pgls)$coefficients
summary(model.pgls)$coefficients$estimate
summary(model.pgls)$coefficients['Estimate']
output <- model.pgls$coefficients
output['Estimate']
output['estimate']
output <- summary(model.pgls)$coefficient
output['Estimate']
output['estimate']
crossval(output)
crossval(summary(model.pgls))
output['predict']
predict(output)
output
output[1]
output[,1]
output <- summary(model.pgls)$coefficient
crossval(output[,1])
output <- summary(model.pgls)$coefficient
crossval <- function(data, output[,1]){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
output <- summary(model.pgls)$coefficient
crossval <- function(data, output[,1]){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
crossval <- function(data, estimate){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
estimate <- output[,1]
crossval <- function(data, estimate){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
crossval <- function(arcData, estimate){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
library(caper)
arcData <- read.csv("arcfeatures2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arc, lambda='ML')
summary(model.pgls)
output <- summary(model.pgls)$coefficient
estimate <- output[,1]
crossval <- function(arcData, estimate){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
crossval <- function(arcData, output[,1]){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
crossval <- function(arcData, output[,1]){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
crossval <- function(arcData, output[,1]){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
crossval <- function(arcData, output[,1]){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
library(caper)
arcData <- read.csv("arcfeatures2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arc, lambda='ML')
summary(model.pgls)
output <- summary(model.pgls)$coefficient
estimate <- output[,1]
crossval <- function(arcData, estimate){
X = as.matrix(data[,c(-1, -2)])
t = data[,2]
N = nrow(X)
X = cbind(rep(1,N), X)
M = ncol(X)
n_fold = N
folds <- cut(seq(1,N),breaks=n_fold,labels=FALSE)
RMSE = 0
for(k in 1:n_fold){
testIndexes <- which(folds==k,arr.ind=TRUE)
X_test <- X[testIndexes, ]
t_test <- t[testIndexes]
X_train <- X[-testIndexes, ]
t_train <- t[-testIndexes]
w = estimate
RMSE = RMSE + mean((t_test - X_test%*%w)**2)**0.5
}
Av_RMSE = RMSE/n_fold
cat('Av. RMSE: ', Av_RMSE, '\n')
}
rm(list=ls())
library(caper)
arcData <- read.csv("arcfeatures2.csv")
arcTree <- read.tree("arcorthocleaned.tre")
arc <- comparative.data(phy = arcTree, data = arcData, names.col = 'Species',vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.pgls<-pgls(OGT ~ prot_D + prot_G + prot_M + prot_P + prot_R + prot_S + prot_V + prot_Y + Genome_Dinuc_AG + Genome_Dinuc_GT + AGA + ATC + CCC + CCT + CGG + prot_Thermolabile + S_GC, data = arc, lambda='ML')
summary(model.pgls)
output <- summary(model.pgls)$coefficient
source('~/code/pgls/crossval_R.r')
crossval(arcData, output[,1])
View(crossval)
